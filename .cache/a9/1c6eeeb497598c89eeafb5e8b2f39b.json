{"id":"../node_modules/d3-request/src/request.js","dependencies":[{"name":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\package.json","includedInParent":true,"mtime":1711629289137},{"name":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\d3-request\\package.json","includedInParent":true,"mtime":1711627387384},{"name":"d3-collection","loc":{"line":1,"column":18,"index":18},"parent":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\d3-request\\src\\request.js","resolved":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\d3-collection\\src\\index.js"},{"name":"d3-dispatch","loc":{"line":2,"column":23,"index":58},"parent":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\d3-request\\src\\request.js","resolved":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\d3-dispatch\\src\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _d3Collection = require(\"d3-collection\");\nvar _d3Dispatch = require(\"d3-dispatch\");\nfunction _default(url, callback) {\n  var request,\n    event = (0, _d3Dispatch.dispatch)(\"beforesend\", \"progress\", \"load\", \"error\"),\n    mimeType,\n    headers = (0, _d3Collection.map)(),\n    xhr = new XMLHttpRequest(),\n    user = null,\n    password = null,\n    response,\n    responseType,\n    timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\" && !(\"withCredentials\" in xhr) && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest();\n  \"onload\" in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {\n    xhr.readyState > 3 && respond(o);\n  };\n  function respond(o) {\n    var status = xhr.status,\n      result;\n    if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n  xhr.onprogress = function (e) {\n    event.call(\"progress\", request, e);\n  };\n  request = {\n    header: function (name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);else headers.set(name, value + \"\");\n      return request;\n    },\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function (value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function (value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n    timeout: function (value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n    user: function (value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n    password: function (value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function (value) {\n      response = value;\n      return request;\n    },\n    // Alias for send(\"GET\", …).\n    get: function (data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n    // Alias for send(\"POST\", …).\n    post: function (data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n    // If callback is non-null, it will be used for error and load events.\n    send: function (method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function (value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function (xhr) {\n        callback(null, xhr);\n      });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n    abort: function () {\n      xhr.abort();\n      return request;\n    },\n    on: function () {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n  return request;\n}\nfunction fixCallback(callback) {\n  return function (error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\" ? xhr.response // null on error\n  : xhr.responseText; // \"\" on error\n}"},"sourceMaps":null,"error":null,"hash":"14ea7f542dbca3711aa04e935f96e5d1","cacheData":{"env":{}}}