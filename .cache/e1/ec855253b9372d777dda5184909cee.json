{"id":"../node_modules/underscore/modules/_methodFingerprint.js","dependencies":[{"name":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\package.json","includedInParent":true,"mtime":1711629289137},{"name":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\package.json","includedInParent":true,"mtime":1711627388337},{"name":"./_getLength.js","loc":{"line":1,"column":22,"index":22},"parent":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\_methodFingerprint.js","resolved":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\_getLength.js"},{"name":"./isFunction.js","loc":{"line":2,"column":23,"index":64},"parent":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\_methodFingerprint.js","resolved":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\isFunction.js"},{"name":"./allKeys.js","loc":{"line":3,"column":20,"index":103},"parent":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\_methodFingerprint.js","resolved":"C:\\Users\\tom.wright\\PycharmProjects\\UK_meetings_app\\ukapp\\integritywatch-uk\\node_modules\\underscore\\modules\\allKeys.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ie11fingerprint = ie11fingerprint;\nexports.weakMapMethods = exports.setMethods = exports.mapMethods = void 0;\nvar _getLength = _interopRequireDefault(require(\"./_getLength.js\"));\nvar _isFunction = _interopRequireDefault(require(\"./isFunction.js\"));\nvar _allKeys = _interopRequireDefault(require(\"./allKeys.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nfunction ie11fingerprint(methods) {\n  var length = (0, _getLength.default)(methods);\n  return function (obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = (0, _allKeys.default)(obj);\n    if ((0, _getLength.default)(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!(0, _isFunction.default)(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !(0, _isFunction.default)(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n  hasName = 'has',\n  commonInit = ['clear', 'delete'],\n  mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nvar mapMethods = exports.mapMethods = commonInit.concat(forEachName, mapTail),\n  weakMapMethods = exports.weakMapMethods = commonInit.concat(mapTail),\n  setMethods = exports.setMethods = ['add'].concat(commonInit, forEachName, hasName);"},"sourceMaps":null,"error":null,"hash":"eac7124d78f8bbe4cad7283ff36d1ce4","cacheData":{"env":{}}}